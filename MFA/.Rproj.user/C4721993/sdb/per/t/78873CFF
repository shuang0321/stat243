{
    "collab_server" : "",
    "contents" : "# auxiliar function to check the length of the labels\ncheck_label<-function(MFA,labels){\n  if(nrow(MFA$MatrixZ)!=length(labels)){\n    stop(\"\\n'labels' must have the same length as the number of the rows in the data\")\n  }\n  TRUE\n}\n\n# auxiliar function to check the dimensions\ncheck_dim<-function(MFA,dim){\n  if(dim>ncol(MFA$MatrixF)){\n    stop(paste0(\"\\n'\",dim,\"' is out of the range, please check!\"))\n  }\n  if(!is.numeric(dim)){\n    stop(paste(\"\\n\",dim,\"must be a number\"))\n  }\n  if(dim%%1!=0){\n    stop(paste(\"\\n\",dim,\"must be an integer\"))\n  }\n  if(dim<1){\n    stop(paste(\"\\n\",dim,\"must be a positive integer equal or bigger to 1\"))\n  }\n  TRUE\n}\n\n#' @title Plot of compromised factor scores\n#' @description This function generates plot of compromised  factor scores across two selected axes\n#' @param data - data set\n#' @param sets - list of vectors indicating the sets of variables\n#' @param center - logical argument, whether to center\n#' @param scale - logical arugment, whether to scale\n#' @param dim1 - integer, selected dimension to plot on x-axis\n#' @param dim2 - integer, selected dimension to plot on y-axis\n#' @param labels - label for each row\n#' @return plots of compromised factor scores for the two selected axes\n#' @export\n#' @examples\n#' plot_factorscore(mtcars[c(1:2,4:5,8:9,20:21),],sets=list(1:3,4:6,7:8,9:11),dim1=1,dim2=2,labels=c(\"Maz1\",\"Maz2\",\"Hor1\",\"Hor2\",\"Merc1\",\"Merc2\",\"Toyota1\",\"Toyota2\"))\n\n\n\nplot_factorscore<-function(data,sets,center=TRUE,scale=TRUE,dim1,dim2,labels){\n\n  MFA<-mfa(data,sets=sets,ncomps=NULL,center=center,scale=scale)\n  check_label(MFA,labels)\n  check_dim(MFA,dim1)\n  check_dim(MFA,dim2)\n\n\n  library(stringr)\n  number<-str_extract(labels,\"[[:digit:]]+\")\n  category<-str_extract(labels,\"[a-zA-Z]+\")\n\n  library(ggplot2)\n  p=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\n  p=p+geom_point(size=3.8)\n  p=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\n  print(p)\n\n}\n\n\n#' @title Plot of partial factor scores and variable loadings for two selected dimensions\n#' @description This function generates plots of partial factor scores and variable loadings for two selected dimensions\n#' @param data - data set\n#' @param sets - list of vectors indicating the sets of variables\n#' @param center - logical argument, whether to center\n#' @param scale - logical arugment, whether to scale\n#' @param dim1 - integer, selected dimension to plot on x-axis\n#' @param dim2 - integer, selected dimension to plot on y-axis\n#' @param labels - label for each row\n#' @return plots of partial factor scores and variable loadings for the two selected axes\n#' @export\n#' @examples\n#' plot_partialfs(mtcars[c(1:2,4:5,8:9,20:21),],sets=list(1:3,4:6,7:8,9:11),dim1=1,dim2=2,labels=c(\"Maz1\",\"Maz2\",\"Hor1\",\"Hor2\",\"Merc1\",\"Merc2\",\"Toyota1\",\"Toyota2\"))\n\n\nplot_partialfs<-function(data,sets,center=TRUE,scale=TRUE,dim1,dim2,labels){\n\n\n  MFA<-mfa(data,sets=sets,ncomps=NULL,center=center,scale=scale)\n  check_label(MFA,labels)\n  check_dim(MFA,dim1)\n  check_dim(MFA,dim2)\n\n  library(stringr)\n  category<-str_extract(labels,\"[a-zA-Z]+\")\n\n\n  library(ggplot2)\n  plot<-list()\n  for(i in 1:MFA$Sets){\n      plot[[i]]<-ggplot(as.data.frame(MFA$MatrixEFG[[i]][,c(dim1,dim2)]),aes(x=MFA$MatrixEFG[[i]][,dim1],y=MFA$MatrixEFG[[i]][,dim2],color=category))+ggtitle(paste(\"Observation\",i))+\n        geom_point(size=3.8)+geom_text(aes(label=labels,vjust = 2, hjust = 0.5))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\n      print(plot[[i]])\n  }\n}\n\n#' @title Plot method for 'mfa' object\n#' @description This function generates i)plot of compromised  factor scores ii)plot of partial factor scores & loadings across two selected axes\n#' @param MFA - a 'mfa' object\n#' @param labels - label for each row\n#' @param dim1 - integer, selected dimension to plot on x-axis\n#' @param dim2 - integer, selected dimension to plot on y-axis\n#' @return\n#' i) Plot of compromised  factor scores across two selected axes\n#'\n#' ii) Plots of partial factor scores & loadings across two selected axes\n#' @export\n#' @examples\n#' plot(MFA=mfa(mtcars[c(1:2,4:5,8:9,20:21),],sets=list(1:3,4:6,7:8,9:11)),labels=c(\"Maz1\",\"Maz2\",\"Hor1\",\"Hor2\",\"Merc1\",\"Merc2\",\"Toyota1\",\"Toyota2\"),dim1=1,dim2=2)\n\n\nplot.mfa <- function(MFA,labels,dim1,dim2){\n  if(class(MFA)!= 'mfa'){\n    stop(\"\\n 'MFA' must be a 'mfa' object\")\n  }\n  ### Checking input arguments\n  check_dim(MFA,dim1)\n  check_dim(MFA,dim2)\n\n  ### Creating label parts\n  library(stringr)\n  number<-str_extract(labels,\"[[:digit:]]+\")\n  category<-str_extract(labels,\"[a-zA-Z]+\")\n\n  library(ggplot2)\n  ### Compromised factor score plot\n  p=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))+ggtitle(\"Compromised Factor Scores\")\n  p=p+geom_point(size=3.8)\n  p=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\n  print(p)\n\n  ### Partial factore score plot\n  plot<-list()\n  for(i in 1:MFA$Sets){\n    plot[[i]]<-ggplot(as.data.frame(MFA$MatrixEFG[[i]][,c(dim1,dim2)]),aes(x=MFA$MatrixEFG[[i]][,dim1],y=MFA$MatrixEFG[[i]][,dim2],color=category))+ggtitle(paste(\"Partial Factor Scores & Variable Loadings - Observation\",i))+\n      geom_point(size=3.8)+geom_text(aes(label=labels,vjust = 2, hjust = 0.5))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\n    print(plot[[i]])\n\n  }}\n",
    "created" : 1481233279478.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3482081576",
    "id" : "78873CFF",
    "lastKnownWriteTime" : 1480544544,
    "last_content_update" : 1480544544,
    "path" : "~/Desktop/study/243 final project/MFA/R/plot.R",
    "project_path" : "R/plot.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}