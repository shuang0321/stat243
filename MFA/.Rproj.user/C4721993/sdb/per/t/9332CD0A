{
    "collab_server" : "",
    "contents" : "j<-j+length(sets[[i-1]])\nContrGru[i,] <- apply(ContrVar[j:(j+length(sets[[i]])-1), ], 2, sum) # Matriz com Contribuicoes dos Grupos\n}\n### End revising\nEscVar <- sweep(ContrGru, 2, MAutoVlr^2, \"*\") # create matrix of variables scores/partial inertia\ncolnames(EscVar) <- paste(\"Axis\", 1:ncol(as.matrix(EscVar)), sep = \" \") # name the columns\n#rownames(EscVar) <- c(\"group 1\", \"group 2\") # name of rows ???\n### End - Partial matrix of inertia/scores of variables ###\ndim <- ncol(as.matrix(EscVar))\nA= unique(PColG)\nrownames(A)<-paste0(\"table\",1:length(A))\ncolnames(A)<-c(\"weight\")\nif(is.null(ncomps))\nLista <- list(Dimension = dim, Sets= NumSets, M = unique(PLinG), A= A,\nMatrixPLin = PLinG,\nMatrixPCol = PColG, MatrixZ = MZG, MatrixA = MEigen,\nMatrixU = MAutoVecU, MatrixV = MAutoVecV, MatrixF = MF,\nMatrixEFG = LMFGrupo, MatrixCCP = CCP, MatrixEscVar = EscVar)\nelse {\nEFG<-list()\ndim = ncomps\nfor(i in 1:NumSets)\nEFG[[i]]<-LMFGrupo[[i]][,1:ncomps]\nLista <- list(Dimension = dim, Sets= NumSets, M = unique(PLinG), A= A,\nMatrixPLin = PLinG,\nMatrixPCol = PColG, MatrixZ = MZG, MatrixA = MEigen[1:ncomps,],\nMatrixU = MAutoVecU[,1:ncomps], MatrixV = MAutoVecV, MatrixF = MF[,1:ncomps],\nMatrixEFG = EFG, MatrixCCP = CCP, MatrixEscVar = EscVar[,1:ncomps])\n}\nclass(Lista)<-\"mfa\"\nreturn(Lista)\n}\n#' @title Print method for 'mfa' object\n#' @description This function defines a print method for \"mfa\" object\n#' @param  x - mfa-object\n#' @param \\dots further arguments ignored\n#' @return basic information of the 'mfa' object including class, dimension, number of the sets, row mass and table weight of the 'mfa' object\n#' @export\nprint.mfa<-function(x, ...){\ncat('object: \"mfa\"\\n')\ncat(sprintf('Dimension: \"%s\"\\n', x$Dimension))\ncat(sprintf('Number of the sets: \"%s\"\\n', x$Sets))\ncat(sprintf('Mass of each row:\"%s\" \\n',x$M))\ncat(\"Weight of each set:\\n\")\nprint(x$A)\n}\nsummary<-function(MFA,ncomps=NULL){\nif(class(MFA)!=\"mfa\"){\nstop(\"Please input 'mfa' object\")\n}\nif(is.null(ncomps))\nEigens<-MFA$MatrixA\nelse\nEigens<-MFA$MatrixA[1:ncomps,]\nreturn(Eigens)\n}\nlibrary(devtools)\n# creating documentation (i.e. the Rd files in man/)\ndevtools::document()\n# checking documentation\ndevtools::check_man() # run tests\ndevtools::test()\n# checking documentation\ndevtools::build_vignettes()\n# building tarball (e.g. oski_0.1.tar.gz)\ndevtools::build()\n# checking install\ndevtools::install()\nlibrary(devtools)\n# creating documentation (i.e. the Rd files in man/)\ndevtools::document()\n# checking documentation\ndevtools::check_man() # run tests\ndevtools::test()\n# checking documentation\ndevtools::build_vignettes()\n# building tarball (e.g. oski_0.1.tar.gz)\ndevtools::build()\n# checking install\ndevtools::install()\n# auxiliar function to check the dimension of table1 and table2\ncheck_types<-function(type){\nif(type>3 | type <1){\nstop(\"\\n'type' must be 1, 2 or 3\")\n}\nif(type%%1!=0){\nstop(\"\\n'type' must be 1, 2 or 3\")\n}\nTRUE\n}\n#' @title Compute contribution\n#' @description This function gets the contribution\n#' @param X - the raw matrix need to be dealt with\n#' @param sets -  list of vectors indicating the sets of variables (i.e. the blocks)\n#' @param type - 1: Contribution of an observation to a dimension\n#' 2: Contribution of a variable to a dimension\n#' 3: Contribution of a table to a dimension.\n#' @return contributions : the contribution of required type\n#' @export\n#' @examples\n#' contr <- contributions(X=mtcars,sets=list(1:3,4:6,7:8,9:11),type=1)\ncontributions<-function(X,sets, type=1) {\ncheck_sets(X,sets)\ncheck_types(type)\n## initialize and get the mfa of the raw matrix\nMFA<-mfa(X,sets,ncomps=NULL,TRUE,TRUE) #get the mfa of raw matrix\nrcontribution<-NULL\ncontribution1<-matrix(nrow=nrow(MFA$MatrixF),ncol=ncol(MFA$MatrixF))\ncontribution2<-matrix(nrow=nrow(MFA$MatrixV),ncol=ncol(MFA$MatrixV))\ncontribution3<-matrix(nrow=length(sets),ncol=ncol(MFA$MatrixV))\neigen<-NULL  #the eigenvalue\na<-NULL #the alpha weight\nm<-rep(1/nrow(X),nrow(X))  #the weight of each row\nstart<-1   #start point of type3\n##get the contribution\nif(type==1){\nfor (j in 1:ncol(MFA$MatrixF))\n{\neigen[j]<-MFA$MatrixA[j,2] #get the eigenvalue of jth dimension\nfor (i in 1:nrow(X))\ncontribution1[i,j]<-(m[j]*(MFA$MatrixF[i,j])^2)/eigen[j] # Contribution of ith observation to jth dimension.\n}\nrcontribution<-contribution1\n}\nelse{\nif(type==2)\n{\na<-MFA$MatrixPCol\nfor (j in 1:ncol(MFA$MatrixV))\n{\nfor (i in 1:nrow(MFA$MatrixV))\ncontribution2[i,j]<-(MFA$MatrixV[i,j])^2*a[j]  #Contribution of ith variable to a jth dimensionn\n}\nrcontribution<-contribution2\n}\nif(type==3)\n{\na<-MFA$MatrixPCol\nfor (j in 1:ncol(MFA$MatrixV))\n{\nfor (i in 1:nrow(MFA$MatrixV))\ncontribution2[i,j]<-(MFA$MatrixV[i,j])^2*a[j]\n}\n### Revise begin\nfor (j in 1:ncol(contribution2))\n{\nfor (h in 1: length(sets))\n{\nif(h==1)\nstart<-1\nelse\nstart<-length(sets[[h-1]])+start\ncontribution3[h,j]<- sum(contribution2[start:(start+length(sets[[h]])-1),j]) #Contribution of hth table to j dimension.\n}\n}\n### Revise end\nrcontribution<-contribution3\n}\n}\nreturn(rcontribution)\n}\ncontr1 <- contributions(X=mtcars,sets=list(1:3,4:6,7:8,9:11),type=1)\ncontr1\ncontr2 <- contributions(X=mtcars,sets=list(1:3,4:6,7:8,9:11),type=2)\ncontr2\ncontr3 <- contributions(X=mtcars,sets=list(1:3,4:6,7:8,9:11),type=3)\ncontr3\ndevtools::document()\n# checking documentation\ndevtools::check_man() # run tests\ndevtools::test()\n# checking documentation\ndevtools::build_vignettes()\n# building tarball (e.g. oski_0.1.tar.gz)\ndevtools::build()\n# checking install\ndevtools::install()\nlibrary(MFA)\n?mfa\n?contributions\n?bootstrap\ncars<-read.table(\"cars.txt\",header = TRUE)\nplot.mfa <- function(MFA,labels,dim1,dim2){\nif(class(MFA)!= 'mfa'){\nstop(\"\\n 'MFA' must be a 'mfa' object\")\n}\n### Checking input arguments\ncheck_dim(MFA,dim1)\ncheck_dim(MFA,dim2)\n### Creating label parts\nlibrary(stringr)\nnumber<-str_extract(labels,\"[[:digit:]]+\")\ncategory<-str_extract(labels,\"[a-zA-Z]+\")\nlibrary(ggplot2)\n### Compromised factor score plot\np=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\np=p+geom_point(size=3.8)\np=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\nprint(p)\n### Partial factore score plot\nplot<-list()\nfor(i in 1:MFA$Sets){\nplot[[i]]<-ggplot(as.data.frame(MFA$MatrixEFG[[i]][,c(dim1,dim2)]),aes(x=MFA$MatrixEFG[[i]][,dim1],y=MFA$MatrixEFG[[i]][,dim2],color=category))+ggtitle(paste(\"Observation\",i))+\ngeom_point(size=3.8)+geom_text(aes(label=labels,vjust = 2, hjust = 0.5))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\nprint(plot[[i]])\n}\nwines<-read.csv(\"https://raw.githubusercontent.com/ucb-stat243/stat243-fall-2016/master/problem-sets/final-project/data/wines.csv\")\nX<-as.matrix(wines[1:12,2:54])\nsets<-list(1:6,7:12,13:18,19:23,24:29,30:34,35:38,39:44,45:49,50:53)\nMFA<-mfa(X,sets,ncomps=NULL)\n}}\nplot.mfa <- function(MFA,labels,dim1,dim2){\nif(class(MFA)!= 'mfa'){\nstop(\"\\n 'MFA' must be a 'mfa' object\")\n}\n### Checking input arguments\ncheck_dim(MFA,dim1)\ncheck_dim(MFA,dim2)\n### Creating label parts\nlibrary(stringr)\nnumber<-str_extract(labels,\"[[:digit:]]+\")\ncategory<-str_extract(labels,\"[a-zA-Z]+\")\nlibrary(ggplot2)\n### Compromised factor score plot\np=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\np=p+geom_point(size=3.8)\np=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\nprint(p)\n### Partial factore score plot\nplot<-list()\nfor(i in 1:MFA$Sets){\nplot[[i]]<-ggplot(as.data.frame(MFA$MatrixEFG[[i]][,c(dim1,dim2)]),aes(x=MFA$MatrixEFG[[i]][,dim1],y=MFA$MatrixEFG[[i]][,dim2],color=category))+ggtitle(paste(\"Observation\",i))+\ngeom_point(size=3.8)+geom_text(aes(label=labels,vjust = 2, hjust = 0.5))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\nprint(plot[[i]])\n}}\nwines<-read.csv(\"https://raw.githubusercontent.com/ucb-stat243/stat243-fall-2016/master/problem-sets/final-project/data/wines.csv\")\nX<-as.matrix(wines[1:12,2:54])\nsets<-list(1:6,7:12,13:18,19:23,24:29,30:34,35:38,39:44,45:49,50:53)\nMFA<-mfa(X,sets,ncomps=NULL)\nID = wines[,1]\nplot(MFA,ID,1,2)\n# auxiliar function to check the length of the labels\ncheck_label<-function(data,labels){\nif(nrow(data)!=length(labels)){\nstop(\"\\n'labels' must have the same length as the number of the rows in the data\")\n}\nTRUE\n}\n# auxiliar function to check the dimensions\ncheck_dim<-function(MFA,dim){\nif(dim>ncol(MFA$MatrixF)){\nstop(paste0(\"\\n'\",dim,\"' is out of the range, please check!\"))\n}\nif(!is.numeric(dim)){\nstop(paste(\"\\n\",dim,\"must be a number\"))\n}\nif(dim%%1!=0){\nstop(paste(\"\\n\",dim,\"must be an integer\"))\n}\nif(dim<1){\nstop(paste(\"\\n\",dim,\"must be a positive integer equal or bigger to 1\"))\n}\nTRUE\n}\n#' @title Plot of compromised factor scores\n#' @description This function generates plots of compromised  factor scores across two selected axes\n#' @param data - data set\n#' @param sets - list of vectors indicating the sets of variables\n#' @param center - logical argument, whether to center\n#' @param scale - logical arugment, whether to scale\n#' @param dim1 - integer, selected dimension to plot on x-axis\n#' @param dim2 - integer, selected dimension to plot on y-axis\n#' @param labels - label for each row\n#' @return plots of compromised factor scores for the two selected axes\n#' @export\n#' @examples\n#' plot_factorscore(mtcars[c(1:2,4:5,8:9,20:21),],sets=list(1:3,4:6,7:8,9:11),dim1=1,dim2=2,labels=c(\"Maz1\",\"Maz2\",\"Hor1\",\"Hor2\",\"Merc1\",\"Merc2\",\"Toyota1\",\"Toyota2\"))\nplot_factorscore<-function(data,sets,center=TRUE,scale=TRUE,dim1,dim2,labels){\ncheck_label(data,labels)\nMFA<-mfa(data,sets=sets,ncomps=NULL,center=center,scale=scale)\ncheck_dim(MFA,dim1)\ncheck_dim(MFA,dim2)\nlibrary(stringr)\nnumber<-str_extract(labels,\"[[:digit:]]+\")\ncategory<-str_extract(labels,\"[a-zA-Z]+\")\nlibrary(ggplot2)\np=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\np=p+geom_point(size=3.8)\np=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\nprint(p)\n}\nplot(MFA,ID,1,2)\nplot.mfa <- function(MFA,labels,dim1,dim2){\nif(class(MFA)!= 'mfa'){\nstop(\"\\n 'MFA' must be a 'mfa' object\")\n}\n### Checking input arguments\ncheck_dim(MFA,dim1)\ncheck_dim(MFA,dim2)\n### Creating label parts\nlibrary(stringr)\nnumber<-str_extract(labels,\"[[:digit:]]+\")\ncategory<-str_extract(labels,\"[a-zA-Z]+\")\nlibrary(ggplot2)\n### Compromised factor score plot\np=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))+ggtitle(\"Compromised Factor Scores\")\np=p+geom_point(size=3.8)\np=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\nprint(p)\n### Partial factore score plot\nplot<-list()\nfor(i in 1:MFA$Sets){\nplot[[i]]<-ggplot(as.data.frame(MFA$MatrixEFG[[i]][,c(dim1,dim2)]),aes(x=MFA$MatrixEFG[[i]][,dim1],y=MFA$MatrixEFG[[i]][,dim2],color=category))+\nggtitle(expression(atop(\"Partial Factor Score and Variable Loadings\", atop(italic(paste(\"Partial Factor ScoresObservation\",i)), \"\"))))+\ngeom_point(size=3.8)+geom_text(aes(label=labels,vjust = 2, hjust = 0.5))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\nprint(plot[[i]])\n}}\nID = wines[,1]\nplot(MFA,ID,1,2)\nplot.mfa <- function(MFA,labels,dim1,dim2){\nif(class(MFA)!= 'mfa'){\nstop(\"\\n 'MFA' must be a 'mfa' object\")\n}\n### Checking input arguments\ncheck_dim(MFA,dim1)\ncheck_dim(MFA,dim2)\n### Creating label parts\nlibrary(stringr)\nnumber<-str_extract(labels,\"[[:digit:]]+\")\ncategory<-str_extract(labels,\"[a-zA-Z]+\")\nlibrary(ggplot2)\n### Compromised factor score plot\np=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))+ggtitle(\"Compromised Factor Scores\")\np=p+geom_point(size=3.8)\np=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\nprint(p)\n### Partial factore score plot\nplot<-list()\nfor(i in 1:MFA$Sets){\nplot[[i]]<-ggplot(as.data.frame(MFA$MatrixEFG[[i]][,c(dim1,dim2)]),aes(x=MFA$MatrixEFG[[i]][,dim1],y=MFA$MatrixEFG[[i]][,dim2],color=category))+ggtitle(paste(\"Partial Factor Scores and Variable Loadings - Observation\",i))+\ngeom_point(size=3.8)+geom_text(aes(label=labels,vjust = 2, hjust = 0.5))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\nprint(plot[[i]])\n}}\nplot(MFA,ID,1,2)\nplot.mfa <- function(MFA,labels,dim1,dim2){\nif(class(MFA)!= 'mfa'){\nstop(\"\\n 'MFA' must be a 'mfa' object\")\n}\n### Checking input arguments\ncheck_dim(MFA,dim1)\ncheck_dim(MFA,dim2)\n### Creating label parts\nlibrary(stringr)\nnumber<-str_extract(labels,\"[[:digit:]]+\")\ncategory<-str_extract(labels,\"[a-zA-Z]+\")\nlibrary(ggplot2)\n### Compromised factor score plot\np=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))+ggtitle(\"Compromised Factor Scores\")\np=p+geom_point(size=3.8)\np=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\nprint(p)\n### Partial factore score plot\nplot<-list()\nfor(i in 1:MFA$Sets){\nplot[[i]]<-ggplot(as.data.frame(MFA$MatrixEFG[[i]][,c(dim1,dim2)]),aes(x=MFA$MatrixEFG[[i]][,dim1],y=MFA$MatrixEFG[[i]][,dim2],color=category))+ggtitle(paste(\"Partial Factor Scores & Variable Loadings - Observation\",i))+\ngeom_point(size=3.8)+geom_text(aes(label=labels,vjust = 2, hjust = 0.5))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\nprint(plot[[i]])\n}}\nplot(MFA,ID,1,2)\nplot.mfa <- function(MFA,labels,dim1,dim2){\nif(class(MFA)!= 'mfa'){\nstop(\"\\n 'MFA' must be a 'mfa' object\")\n}\n### Checking input arguments\ncheck_dim(MFA,dim1)\ncheck_dim(MFA,dim2)\n### Creating label parts\nlibrary(stringr)\nnumber<-str_extract(labels,\"[[:digit:]]+\")\ncategory<-str_extract(labels,\"[a-zA-Z]+\")\nlibrary(ggplot2)\n### Compromised factor score plot\np=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))+ggtitle(\"Compromised Factor Scores\")\np=p+geom_point(size=3.8)\np=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\nprint(p)\n### Partial factore score plot\nplot<-list()\nfor(i in 1:MFA$Sets){\nplot[[i]]<-ggplot(as.data.frame(MFA$MatrixEFG[[i]][,c(dim1,dim2)]),aes(x=MFA$MatrixEFG[[i]][,dim1],y=MFA$MatrixEFG[[i]][,dim2],color=category))+ggtitle(paste(\"Partial Factor Scores & Variable Loadings - Observation\",i))+\ngeom_point(size=3.8)+geom_text(aes(label=labels,vjust = 2, hjust = 0.5))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2),title=\"Partial Factor Scores & Variable Loadings\",subtitle=paste(\"Observation\",i))\nprint(plot[[i]])\n}}\nplot(MFA,ID,1,2)\nplot.mfa <- function(MFA,labels,dim1,dim2){\nif(class(MFA)!= 'mfa'){\nstop(\"\\n 'MFA' must be a 'mfa' object\")\n}\n### Checking input arguments\ncheck_dim(MFA,dim1)\ncheck_dim(MFA,dim2)\n### Creating label parts\nlibrary(stringr)\nnumber<-str_extract(labels,\"[[:digit:]]+\")\ncategory<-str_extract(labels,\"[a-zA-Z]+\")\nlibrary(ggplot2)\n### Compromised factor score plot\np=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))+ggtitle(\"Compromised Factor Scores\")\np=p+geom_point(size=3.8)\np=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\nprint(p)\n### Partial factore score plot\nplot<-list()\nfor(i in 1:MFA$Sets){\nplot[[i]]<-ggplot(as.data.frame(MFA$MatrixEFG[[i]][,c(dim1,dim2)]),aes(x=MFA$MatrixEFG[[i]][,dim1],y=MFA$MatrixEFG[[i]][,dim2],color=category))+ggtitle(paste(\"Partial Factor Scores & Variable Loadings - Observation\",i))+\ngeom_point(size=3.8)+geom_text(aes(label=labels,vjust = 2, hjust = 0.5))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\nprint(plot[[i]])\n}}\nplot(MFA,ID,1,2)\nplot.mfa <- function(MFA,labels,dim1,dim2){\nif(class(MFA)!= 'mfa'){\nstop(\"\\n 'MFA' must be a 'mfa' object\")\n}\n### Checking input arguments\ncheck_dim(MFA,dim1)\ncheck_dim(MFA,dim2)\n### Creating label parts\nlibrary(stringr)\nnumber<-str_extract(labels,\"[[:digit:]]+\")\ncategory<-str_extract(labels,\"[a-zA-Z]+\")\nlibrary(ggplot2)\n### Compromised factor score plot\np=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))+ggtitle(\"Compromised Factor Scores\")\np=p+geom_point(size=3.8)\np=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\nprint(p)\n### Partial factore score plot\nplot<-list()\nfor(i in 1:MFA$Sets){\nplot[[i]]<-ggplot(as.data.frame(MFA$MatrixEFG[[i]][,c(dim1,dim2)]),aes(x=MFA$MatrixEFG[[i]][,dim1],y=MFA$MatrixEFG[[i]][,dim2],color=category))+ggtitle(paste(\"Partial Factor Scores & Variable Loadings - Observation\",i))+\ngeom_point(size=3.8)+geom_text(aes(label=labels,vjust = 2, hjust = 0.5))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\nprint(plot[[i]])\n}}\nID = wines[,1]\nplot(MFA,ID,1,2)\nnrow(X)\nnrow(MFA$MatrixZ)\ncheck_label<-function(MFA,labels){\nif(nrow(MFA$MatrixZ)!=length(labels)){\nstop(\"\\n'labels' must have the same length as the number of the rows in the data\")\n}\nTRUE\n}\nlibrary(devtools)\n# creating documentation (i.e. the Rd files in man/)\ndevtools::document()\n# checking documentation\ndevtools::check_man() # run tests\ndevtools::test()\n# checking documentation\ndevtools::build_vignettes()\nlibrary(devtools)\n# creating documentation (i.e. the Rd files in man/)\ndevtools::document()\n# checking documentation\ndevtools::check_man() # run tests\ndevtools::test()\n# checking documentation\ndevtools::build_vignettes()\nplot_factorscore(mtcars[c(1:2,4:5,8:9,20:21),],sets=list(1:3,4:6,7:8,9:11),dim1=1,dim2=2,\nlabels=c(\"Maz1\",\"Maz2\",\"Hor1\",\"Hor2\",\"Merc1\",\"Merc2\",\"Toyota1\",\"Toyota2\"))\ncheck_label<-function(MFA,labels){\nif(nrow(MFA$MatrixZ)!=length(labels)){\nstop(\"\\n'labels' must have the same length as the number of the rows in the data\")\n}\nTRUE\n}\nplot_factorscore<-function(data,sets,center=TRUE,scale=TRUE,dim1,dim2,labels){\nMFA<-mfa(data,sets=sets,ncomps=NULL,center=center,scale=scale)\ncheck_label(MFA,labels)\ncheck_dim(MFA,dim1)\ncheck_dim(MFA,dim2)\nlibrary(stringr)\nnumber<-str_extract(labels,\"[[:digit:]]+\")\ncategory<-str_extract(labels,\"[a-zA-Z]+\")\nlibrary(ggplot2)\np=ggplot(as.data.frame(MFA$MatrixF),aes(x=MFA$MatrixF[,dim1],y=MFA$MatrixF[,dim2],color=category))+labs(x=paste(\"Axis\",dim1),y=paste(\"Axis\",dim2))\np=p+geom_point(size=3.8)\np=p+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\nprint(p)\n}\nplot_factorscore(mtcars[c(1:2,4:5,8:9,20:21),],sets=list(1:3,4:6,7:8,9:11),dim1=1,dim2=2,\nlabels=c(\"Maz1\",\"Maz2\",\"Hor1\",\"Hor2\",\"Merc1\",\"Merc2\",\"Toyota1\",\"Toyota2\"))\ndevtools::document()\n# checking documentation\ndevtools::check_man() # run tests\ndevtools::test()\n# checking documentation\ndevtools::build_vignettes()\n# building tarball (e.g. oski_0.1.tar.gz)\ndevtools::build()\ndevtools::install()\ndevtools::document()\n# checking documentation\ndevtools::check_man() # run tests\ndevtools::test()\n# checking documentation\ndevtools::build_vignettes()\n# building tarball (e.g. oski_0.1.tar.gz)\ndevtools::build()\n# checking install\ndevtools::install()\n",
    "created" : 1481065942996.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4133765992",
    "id" : "9332CD0A",
    "lastKnownWriteTime" : 1480544532,
    "last_content_update" : 1480544532,
    "path" : "~/Desktop/study/243 final project/MFA/_Rhistory",
    "project_path" : "_Rhistory",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "text"
}