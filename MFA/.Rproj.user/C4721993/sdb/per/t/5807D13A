{
    "collab_server" : "",
    "contents" : "# auxiliar function to check the range of the sets\ncheck_sets<-function(data,sets){\n  for(i in 1:length(sets)){\n    for(j in 1:length(sets[[i]]))\n      if(sets[[i]][j]>ncol(data)){\n        stop(\"\\n'sets' is beyond range of the dataset\")\n      }\n  }\n  TRUE\n}\n\n# auxiliar function to check the logical input for center\ncheck_center<-function(center){\n  if(!is.logical(center)){\n    stop(\"\\n'center' must be TRUE or FALSE\")\n  }\n  TRUE\n}\n\n# auxiliar function to check the logical input for scale\ncheck_scale<-function(scale){\n  if(!is.logical(scale)){\n    stop(\"\\n'scale' must be TRUE or FALSE\")\n  }\n  TRUE\n}\n\n# auxiliar function to check the number of the components\ncheck_ncomps <- function(data,ncomps) {\n  if (!is.null(ncomps)){\n    if (!is.numeric(ncomps)|ncomps==0) {\n      stop(\"\\n'ncomps' must be a number bigger than 0\")\n    }\n    if (ncomps>=nrow(data)) {\n      stop(\"\\n'ncomps' must be smaller than number of the total variables\")\n    }\n  }\n\n  TRUE\n}\n\n\n#' @title Multiple factor analysis\n#' @description This function demostrates basic functionalities of Multiple Factor Analysis\n#' @param data - data set\n#' @param sets - list of vectors indicating the sets of variables\n#' @param ncomps - integer, how many number of components\n#' @param center - logical argument, whether to center\n#' @param scale - logical argument, whether to scale\n#' @return List containing:\n#'\n#' Dimension - Number of the components\n#'\n#' Sets - Number of the sets\n#'\n#' M - masses for the rows\n#'\n#' A - squared singular value derived weights for the k tables\n#'\n#' PLin - Vector with weights for lines\n#'\n#' PCol - Vector with weights for columns\n#'\n#' MatrixA  - Matrix with eigenvalues (Variances)\n#'\n#' MatrixU  - Matrix U of the SVD of Matrix Z\n#'\n#' MatrixV  - Matriz V of the SVD of Natrix Z\n#'\n#' MatrixF  - Compromise Factor Score Matrix\n#'\n#' MatrixEFG - Partial Factor Score Matrix\n#'\n#' MatrixCCP - Matrix with Correlation of Principal Components with Groups\n#'\n#' MatrixEscVar - Matrix of Partial Inertia\n#' @export\n#' @examples\n#' mfa1 <- mfa(data=mtcars,sets=list(1:3,4:6,7:8,9:11), ncomps = NULL, center = TRUE, scale = TRUE)\n\nmfa <- function(data, sets, ncomps = NULL, center = TRUE, scale = TRUE) {\n  check_sets(data,sets)\n  check_ncomps(data,ncomps)\n  check_center(center)\n  check_scale(scale)\n\n    MBQ <- function(DataQ, center=TRUE, scale=TRUE) {\n      #center, scale and get the weight of M and A\n\n      # Input:\n      # DataQ - raw data to be dealt with\n      # center - whether centering\n      # scale - whether scale\n\n      # Returns:\n      # MZ   - centered and scaled matrix(according to choice)\n      # PLin - line weights\n      # PCol - column weights\n\n      MZ <- NULL    #\n      PLin <- NULL   #\n      PCol <- NULL   #\n\n      ### Begin - Center and scale data  ###\n      MC <- as.matrix(DataQ) #\n\n      if(center==TRUE)\n      {\n        Media <- apply(MC,2,mean) # Matrix with averages by columns\n\n        MC <- sweep(MC, 2, Media, FUN = \"-\") # Centering\n      }\n\n      if(scale==TRUE){\n\n        Media <- apply(MC,2,mean) # Matrix with averages by columns\n\n        MC_after <- sweep(MC, 2, Media, FUN = \"-\") # Centering\n\n        SqSum <- sqrt(colSums(MC_after^2))\n\n        MC <- sweep(MC, 2, SqSum, FUN = \"/\") # Scaling\n      }\n\n      ### End - Center and scale ###\n\n      PLin <- rep(1/nrow(MC),nrow(MC))\n\n      Pe <- (svd(MC)$d[1])^2   # find the first eigenvalue of MC\n\n      PCol <- cbind(PCol,t(rep(1/Pe,ncol(MC)))) # matrix weights of column\n\n      Lista <- list(MZ=MC, PLin=PLin, PCol=PCol)\n\n      return(Lista)\n    }\n\n\n    if (is.null(sets)) # Creates names for the variables if not exist\n      sets <- paste(\"Variable\", 1:10, sep = \" \")\n\n    ### Begin - Get the weight of the groups of variables\n    NumSets = length(sets) # number of groups formed\n\n    MZG   <- NULL  # general Z null array\n    PLinG <- NULL  # general matrix with null line weights\n    PColG <- NULL  # general matrix with null column weights\n\n    for (i in 1:NumSets) {\n### Start revising\n      if (TRUE) { # we only process quantitative data now\n\n        if (i==1)\n          j<-1\n        else\n          j<-j+length(sets[[i]])\n        MB   <- MBQ(data[,sets[[i]]],center=center,scale=scale)\n        MZ   <- MB$MZ\n        PLin <- MB$PLin\n        PCol <- MB$PCol\n        colnames(PCol) <- colnames(data[,sets[[i]]])\n      }\n### End revising\n      PLinG <- PLin  # general matrix with line weights\n\n      PColG <- cbind(PColG,PCol) # general matrix with column weights\n\n      MZG   <- cbind(MZG,MZ)     # centered and scaled matrix\n\n    }\n\n    PColG <- t(PColG)\n    ### End - Get the weight of the groups of variables ###\n\n    ### Begin - Find the eigenvectors and eigenvalues ###\n    MDS <- GSVD(MZG, PLinG, PColG) #\n    MAutoVlr  <- MDS$d  #\n    MAutoVecU <- MDS$u  #\n    MAutoVecV <- MDS$v  #\n\n### Start revising### Revisedx2\n    MEigen <- as.data.frame(matrix(NA, length(MAutoVlr), 5))\n    rownames(MEigen) <- paste(\"Axis\", 1:length(MAutoVlr))\n    colnames(MEigen) <- c(\"Singular value\",\"Eigenvalue\", \"% cumulative eigenvalue\",\"% Inertia\",\"% cumulative Inertia\")\n    MEigen[, \"Singular value\"] <- MAutoVlr\n    MEigen[, \"Eigenvalue\"] <- MAutoVlr^2\n    MEigen[, \"% cumulative eigenvalue\"] <- cumsum(MEigen[, \"Eigenvalue\"])\n    MEigen[, \"% Inertia\"] <- (MAutoVlr^2/sum(MAutoVlr^2)) * 100\n    MEigen[, \"% cumulative Inertia\"] <- cumsum(MEigen[,\"% Inertia\"])\n### End revising\n\n    NumAutoVlr <- length(MAutoVlr) # Number of variables\n\n    NE <- length(MAutoVlr[MAutoVlr>1e-10]) # Number of significant elements\n    ### End - Find the eigenvectors and eigenvalues ###\n\n    ### Begin - Matrix of compromise factor score ###\n    MF <-  MAutoVecU[,1:NE]%*%diag(MAutoVlr[1:NE],NE) # Matrix F - compromise factor score\n    rownames(MF) <- rownames(data) # name the rows\n    colnames(MF) <- paste(\"Axis\", 1:ncol(as.matrix(MF)), sep = \" \") # name the columns\n    ### End - Matrix of compromise factor score ###\n\n### Start revising\n    ### Begin - Matrix of factor scores by group ###\n\n    LMFGrupo <- as.list(1:NumSets) #\n\n    for (i in 1:NumSets) {\n      if (i==1)\n        j<-1\n      else\n        j<-j+length(sets[[i-1]])\n\n      MFG <- NumSets * MZG[,j:(j+length(sets[[i]])-1)]\n\n      MFG <- sweep(MFG, 2, PColG[j:(j+length(sets[[i]])-1)], FUN=\"*\")\n\n      LMFGrupo[[i]] <- MFG%*%MAutoVecV[j:(j+length(sets[[i]])-1),] # create matrix of partial factor scores by group\n\n      colnames(LMFGrupo[[i]]) <- paste(\"Axis\", 1:ncol(as.matrix(LMFGrupo[[i]])), sep = \" \") #\n\n    }\n\n    names(LMFGrupo) <- paste(\"Group\", 1:NumSets, sep = \"\") # name of group\n    ### End - Matrix of factor scores by group ###\n### End revising\n\n    ### Begin -  Correlation of Principal Components with Original Variables ###\n    CCP <- sweep(as.matrix(MAutoVecV), 2, MAutoVlr, FUN = \"*\")\n    CCP <- t(CCP)\n    rownames(CCP) <- paste(\"Axis\", 1:NumAutoVlr, sep = \" \")\n    colnames(CCP) <- colnames(MZG)\n    ### End -  Correlation of Principal Components with Original Variables ###\n\n    ### Begin - Partial matrix of inertia/scores of variables ###\n    CoordVar <- sweep(as.matrix(MAutoVecV), 2, sqrt(MAutoVlr), FUN = \"*\")  # Coordenadas das variaveis\n\n    ContrVar <- sweep(as.matrix(CoordVar^2), 2, MAutoVlr, \"/\") # Contribuicao das variaveis\n\n    ContrVar <- sweep(as.matrix(ContrVar), 1, PColG, \"*\")\n\n    ContrGru <- matrix(data = NA, nrow = NumSets, ncol = NumAutoVlr) # Matriz com Contribuicoes dos Grupos\n\n### Begin revising\n    for (i in 1:NumSets) {\n      if(i==1)\n        j<-1\n      else\n        j<-j+length(sets[[i-1]])\n      ContrGru[i,] <- apply(ContrVar[j:(j+length(sets[[i]])-1), ], 2, sum) # Matriz com Contribuicoes dos Grupos\n\n    }\n### End revising\n\n    EscVar <- sweep(ContrGru, 2, MAutoVlr^2, \"*\") # create matrix of variables scores/partial inertia\n\n    colnames(EscVar) <- paste(\"Axis\", 1:ncol(as.matrix(EscVar)), sep = \" \") # name the columns\n\n    #rownames(EscVar) <- c(\"group 1\", \"group 2\") # name of rows ???\n    ### End - Partial matrix of inertia/scores of variables ###\n    dim <- ncol(as.matrix(EscVar))\n    A= unique(PColG)\n    rownames(A)<-paste0(\"table\",1:length(A))\n    colnames(A)<-c(\"weight\")\n\n\n    if(is.null(ncomps))\n      Lista <- list(Dimension = dim, Sets= NumSets, M = unique(PLinG), A= A,\n                    MatrixPLin = PLinG,\n                    MatrixPCol = PColG, MatrixZ = MZG, MatrixA = MEigen,\n                    MatrixU = MAutoVecU, MatrixV = MAutoVecV, MatrixF = MF,\n                    MatrixEFG = LMFGrupo, MatrixCCP = CCP, MatrixEscVar = EscVar)\n\n    else {\n      EFG<-list()\n      dim = ncomps\n      for(i in 1:NumSets)\n        EFG[[i]]<-LMFGrupo[[i]][,1:ncomps]\n\n      Lista <- list(Dimension = dim, Sets= NumSets, M = unique(PLinG), A= A,\n                    MatrixPLin = PLinG,\n                    MatrixPCol = PColG, MatrixZ = MZG, MatrixA = MEigen[1:ncomps,],\n                    MatrixU = MAutoVecU[,1:ncomps], MatrixV = MAutoVecV, MatrixF = MF[,1:ncomps],\n                    MatrixEFG = EFG, MatrixCCP = CCP, MatrixEscVar = EscVar[,1:ncomps])\n    }\n\n  class(Lista)<-\"mfa\"\n  return(Lista)\n}\n\n#' @title Print method for 'mfa' object\n#' @description This function defines a print method for \"mfa\" object\n#' @param  x - mfa-object\n#' @param \\dots further arguments ignored\n#' @return basic information of the 'mfa' object including class, dimension, number of the sets, row mass and table weight of the 'mfa' object\n#' @export\n\nprint.mfa<-function(x, ...){\n  cat('object: \"mfa\"\\n')\n  cat(sprintf('Dimension: \"%s\"\\n', x$Dimension))\n  cat(sprintf('Number of the sets: \"%s\"\\n', x$Sets))\n  cat(sprintf('Mass of each row:\"%s\" \\n',x$M))\n  cat(\"Weight of each set:\\n\")\n  print(x$A)\n}\n\n",
    "created" : 1481233262102.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2835209735",
    "id" : "5807D13A",
    "lastKnownWriteTime" : 1480544542,
    "last_content_update" : 1480544542,
    "path" : "~/Desktop/study/243 final project/MFA/R/MFA.R",
    "project_path" : "R/MFA.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}