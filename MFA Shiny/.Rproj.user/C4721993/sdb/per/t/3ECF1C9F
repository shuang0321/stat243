{
    "collab_server" : "",
    "contents" : "# server2. AFM\nlibrary(MFA)\nlibrary(ggplot2)\nwines<-read.csv(\"wines.csv\")\nX<-as.matrix(wines[1:12,2:54])\n\nshinyServer(\n  function(input, output) {\n    \n    values=reactive({\n      nbfreq=0\n      nbquali=0\n      nbquanti=0\n      quantisup=0\n      listquali=c()\n      gsup=c()\n      dataselec=x[,input$variables1]\n      groupe=length(input$variables1)\n      nbgroupe=1\n      \n      \n      insets <- input$insets\n      sets=list()\n      for (i in 1:length(insets))\n        sets[i] = gsets[ as.numeric(insets[i]) ]\n      ncomp=input$inncomp\n      center=input$incenter\n      scale=input$inscale\n      if(is.numeric(ncomp))\n      MFA<- mfa(X,sets,ncomp,center,scale)\n      else MFA<-mfa(X,sets,NULL,center=center,scale=scale)\n      contrib1 <- contributions(X,sets,1)\n      contrib2 <- contributions(X,sets,2)\n      contrib3 <- contributions(X,sets,3)\n      list(res.MFA=MFA,res.insets=insets,res.sets=sets,res.ctb1=contrib1,res.ctb2=contrib2,res.ctb3=contrib3)\n    })\n    \n    error=function(){\n      if (TRUE) { ##if(length(input$variables1)!=0 && length(input$variables2)!=0){\n        etat=\"ok\"\n      }\n      else{\n        etat=\"not\"\n      }\n      return(etat)\n    }\n    \n    # scatterplot of the common factor scores\n    Plot1 <- function(){\n      figdm <- values()$res.MFA$MatrixF\n      x<- figdm[,1]\n      y<- figdm[,2]\n      a<-data.frame(x,y)\n      a$place=as.factor(substr(glabels,1,2))\n      a$number=substr(glabels,3,3)\n      p=ggplot(a,aes(x=x,y=y,color=place))+geom_point(size=3.8)+geom_text(aes(label = number, vjust = 1.1, hjust = -0.5))\n      p <- p+theme(plot.title = element_text(size=20, face=\"bold\", margin=margin(10,0,10,0)))\n      p <- p+ggtitle(\"scatterplot of the common factor scores\")\n      \n      print(p)\n    }\n    \n    output$map <- renderPlot({\n      p <- Plot1()\n      \n    })\n    \n    output$map2 <- renderPlot({\n      \n      if(input$colorgroup==TRUE){\n        habi=\"group\"\n      }\n      if(input$colorgroup==FALSE){\n        habi=\"none\"\n      }\n      if(input$selection==gettext(\"No selection\")){\n        selec=NULL\n      }\n      if(input$selection==\"contrib\"){\n        selec=paste(\"contrib \",input$slider2)\n      }\n      if(input$selection==\"cos2\"){\n        if(input$slider3!=1){\n          selec=paste(\"cos2 \",input$slider3)\n        }\n        else{\n          selec=\"cos2 0.999\"\n        }\n      }\n      #      invi=\"none\"\n      if(is.null(input$hides)){\n        invi=\"none\"\n      }else{\n        if (input$hides==gettext(\"Nothing\")) invi=\"none\"\n        if (input$hides==gettext(\"Active variables\")) invi=\"quanti\"\n        if (input$hides==gettext(\"Supplementary variables\")) invi=\"quanti.sup\"\n      }\n      # if(!is.null(input$hides)){\n      # validate(need(!(input$hides==gettext(\"Active variables\")&&values()$QUANTISUP==1),\"Impossible with only one supplementary group\"))\n      # }\n      plot.MFA(values()$res.MFA,choix=\"var\",axes=c(as.numeric(input$nb1),as.numeric(input$nb2)),title=input$title3,habillage=habi,select=selec,invisible=invi)\n    })\n    \n\n    Plot5 <- function(){\n      mt <- values()$res.MFA$MatrixA\n      \n      dt = data.frame(comp=rownames(mt), val=mt[,1])\n      p=ggplot(data=dt, aes(x=comp, y=val)) + geom_bar(stat=\"identity\")\n      \n      p <- p+theme(plot.title = element_text(size=20, face=\"bold\", margin=margin(10,0,10,0)))\n      p <- p+ggtitle(\"chart of eigenvalues\")\n      print(p)\n    }\n    \n    output$map5 <- renderPlot({\n      p <- Plot5()\n    })\n    \n    # scatterplot of the partial factors scores\n    Plot4 <- function(){\n      nrows <- dim(values()$res.MFA$MatrixEFG[[1]])[1]\n      fig <- matrix(unlist(values()$res.MFA$MatrixEFG), ncol=2, byrow=TRUE)\n      fig <- round(fig,2)\n      colass = c()  # column assessor\n      colplc = c()  # column place\n      for (i in 1:length(input$insets)) {\n        colass <- c(colass, rep( sprintf(\"%02d\",as.numeric(input$insets[i])),nrows))\n        colplc <- c(colplc, gplaces)\n      }\n      figd <- cbind(fig, colass, colplc)\n      \n      colnames(figd) <- c(\"axis1\",\"axis2\",\"assessor\",\"place\")\n      \n      fig3d <- as.data.frame(figd)\n      p <- ggplot(data=fig3d, aes(x=axis1,y=axis2,color=place)) + geom_point() + facet_wrap(~ assessor, ncol=5)\n      p <- p+theme(plot.title = element_text(size=20, face=\"bold\", margin=margin(10,0,10,0)))\n      p <- p+ggtitle(\"Scatterplot of the partial factors scores\")\n      #aes, axis.text.y=element_blank()\n      p <- p+scale_y_discrete(breaks=seq(-1,1,0.05))+scale_x_discrete(breaks=seq(-1,1,0.05))\n      #p <- p+theme(axis.text.x=element_blank(),axis.ticks.x = element_blank())\n      print(p)\n    }\n    \n    output$map4 <- renderPlot({\n      p <- Plot4()\n    })\n    ## scatterplot of loadings \n    Plot7 <- function(){\n      ecol=c()\n      plsets <- values()$res.sets\n      for (i in 1:length(plsets)) {\n        assessor <- as.numeric(values()$res.insets[i])\n        ecol <- c(ecol, rep(assessor,length(plsets[i])))\n      }\n      figd <- cbind(values()$res.MFA$MatrixV, ecol)\n      dim2 <- dim(values()$res.MFA$MatrixV)[2] + 1\n      colnames(figd) <- seq(1,dim2)\n      colnames(figd)[1] <- \"Comp1\"\n      colnames(figd)[2] <- \"Comp2\"\n      colnames(figd)[dim2] <- \"col\"\n      fig3d <- as.data.frame(figd)\n      print(plsets)\n      print(fig3d)\n      # aes,color=as.factor(col)\n      p <- ggplot(data=fig3d, aes(Comp1,Comp2,color=as.factor(col))) + geom_point(size=3.8)\n      p <- p+theme(plot.title = element_text(size=20, face=\"bold\", margin=margin(10,0,10,0)))\n      p <- p+ggtitle(\"Scatterplot of the loadings\")\n      print(p)\n      \n    }\n    output$map22 <- renderPlot({\n      p <- Plot7()\n    })\n    \n    output$plot <- renderPlot({\n      switch(input$pType, \"eigenvalues\"= Plot5(), \n             \"common factor scores\" = Plot1(),\n             \"partial factor scores\" = Plot4(),\n             \"loadings\" = Plot7())\n    })\n    \n    output$drawindiv=renderUI({\n      if(input$choixpartial==gettext(\"None\")){\n        #        return(radioButtons(\"drawind\",gettext(\"Drawing by\"),choices=list(\"No selection\"= \"a\",\"By individual\"=\"b\",\"By categorical variable\"=\"c\"),inline=TRUE))\n        return(radioButtons(\"drawind\",gettext(\"Drawing by\"),choices=list(gettext(\"No selection\"),gettext(\"individual\"),gettext(\"categorical variable\")),inline=TRUE))\n      }\n      else{\n        #       return(radioButtons(\"drawind\",gettext(\"Drawing by\"),choices=list(\"By individual\"= \"a\",\"By group\"=\"b\",\"By categorical variable\"=\"c\"),inline=TRUE))\n        return(radioButtons(\"drawind\",gettext(\"Drawing by\"),choices=list(gettext(\"individual\"),gettext(\"group\"),gettext(\"categorical variable\")),inline=TRUE))\n      }\n    })\n    \n    \n    \n    output$habillagequali=renderUI({\n      if(input$activeG2==TRUE && length(input$variables2)>0){\n        if(!(is.null(values()$LISTQUALI))){\n          choix=values()$LISTQUALI\n          if(length(choix)==1){\n            return(selectInput(\"habiquali\",\" \",choices=choix))\n          }\n          else{\n            num=c(1:length(choix))\n            return(selectInput(\"habiquali\",\" \",choices=list(num=choix)))\n          }\n        }\n      }\n      else{\n        p(gettext(\"No groups of categorical variables\"))\n      }\n    })\n    \n    \n    ### Recuperation des parametres\n    observe({\n      if(input$Quit==0){\n      }\n      else{\n        isolate({\n          stopApp(returnValue=valeuretour())\n        })\n      }\n    })\n    \n    valeuretour=function(){\n      res=list()\n      res$code=values()$res.MFA\n      res$axe1=input$nb1\n      res$axe2=input$nb2\n      res$ind1=input$meanind1\n      res$ind2=input$meanind\n      res$ind3=input$qualind1\n      res$ind4=input$qualind\n      res$drawing=input$drawind\n      res$drawing2=input$habiquali\n      res$partial=input$choixpartial\n      res$partial2=input$indivpartiel\n      res$partial3=input$partind\n      res$selectvar=input$selection\n      sel=NULL\n      if(input$selection==\"contrib\"){\n        sel=input$slider2\n      }\n      if(input$selection==\"cos2\"){\n        sel=input$slider3\n      }\n      res$selectvar2=sel\n      res$hide=input$hides\n      res$colorvar=input$colorgroup\n      res$freq1=input$affichind\n      res$freq2=input$affichcol\n      res$partaxe=input$coloraxe\n      res$nom=nomData\n      res$code2=codeGraph2()\n      res$code3=codeGraph3()\n      res$code4=codeGraph4()\n      res$code5=codeGraph5()\n      res$title1=input$title1\n      res$title2=input$title2\n      res$title3=input$title3\n      res$title4=input$title4\n      res$title5=input$title5\n      class(res)=\"MFAshiny\"\n      return(res)\n    }\n    \n    output$slider1=renderUI({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",\" \")\n      )\n      maxlength=dim(values()$res.MFA$quanti.var$coord)[1]\n      if(input$selection==\"contrib\"){\n        return(sliderInput(\"slider2\",gettext(\"Number of the most contributive variables\"),min=1, max=maxlength, value=maxlength, step=1))\n      }\n      if(input$selection==\"cos2\"){\n        return(sliderInput(\"slider3\",gettext(\"Number of variables with highest cos2\"),min=0, max=maxlength, value=maxlength, step=1))\n      }\n    })\n    \n\n    output$sorties=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$eig))\n    })\n    \n    output$map3=renderPlot({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(barplot(values()$res.MFA$eig[,1],names.arg=rownames(values()$res.MFA$eig),las=2))\n    })\n    output$JDD=renderDataTable({\n      cbind(Names=rownames(x),x)},\n      options = list(    \"orderClasses\" = TRUE,\n                         \"responsive\" = TRUE,\n                         \"pageLength\" = 10))\n    output$summary=renderPrint({\n      summary(x)\n    })\n    output$summaryMFA=renderPrint({\n      ##summary.MFA(values()$res.MFA)\n      print(values()$res.MFA)\n    })  \n    output$compromise=renderPrint({\n      ##summary.MFA(values()$res.MFA)\n      print(values()$res.MFA$MatrixF)\n    })\n    output$partial=renderPrint({\n      ##summary.MFA(values()$res.MFA)\n      print(values()$res.MFA$MatrixEFG)\n    })\n    \n    output$histo=renderPlot({\n      par(mfrow=c(1,2))\n      boxplot(x[,input$bam])\n      plot(density(x[,input$bam]),main=\"\",xlab=\"\")\n    })\n    \n    \n    output$downloadData = downloadHandler(\n      filename = function() { \n        paste('graph1','.png', sep='') \n      },\n      content = function(file) {\n        png(file)\n        Plot1()\n        dev.off()\n      },\n      contentType='image/png')\n    \n    output$downloadData3 = downloadHandler(\n      filename = function() { \n        paste('graph2','.png', sep='') \n      },\n      content = function(file) {\n        png(file)\n        Plot2()\n        dev.off()\n      },\n      contentType='image/png')\n    \n    output$download3=renderUI({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",\"\")\n      )\n      if(values()$NBQUANTI==0){\n        return()\n      }\n      else{\n        return(downloadButton(\"downloadData3\",gettext(\"Download as png\")))\n      }\n    })\n    \n    output$downloadData11 = downloadHandler(\n      filename = function() { \n        paste('graph3','.png', sep='') \n      },\n      content = function(file) {\n        png(file)\n        Plot5()\n        dev.off()\n      },\n      contentType='image/png')\n    \n    output$downloadData12 = downloadHandler(\n      filename = function() { \n        paste('graph3','.jpg', sep='') \n      },\n      content = function(file) {\n        jpeg(file)\n        Plot5()\n        dev.off()\n      },\n      contentType='image/jpg')\n    \n    output$downloadData13 = downloadHandler(\n      filename = function() { \n        paste('graph3','.pdf', sep='') \n      },\n      content = function(file) {\n        pdf(file)\n        Plot5()\n        dev.off()\n      },\n      contentType=NA)\n    \n    \n    output$downloadData15 = downloadHandler(\n      filename = function() { \n        paste('graph4','.png', sep='') \n      },\n      content = function(file) {\n        png(file)\n        Plot4()\n        dev.off()\n      },\n      contentType='image/png')\n    \n    output$downloadData16 = downloadHandler(\n      filename = function() { \n        paste('graph4','.jpg', sep='') \n      },\n      content = function(file) {\n        jpeg(file)\n        Plot4()\n        dev.off()\n      },\n      contentType='image/jpg')\n    \n    output$downloadData17 = downloadHandler(\n      filename = function() { \n        paste('graph4','.pdf', sep='') \n      },\n      content = function(file) {\n        pdf(file)\n        Plot4()\n        dev.off()\n      },\n      contentType=NA)\n    \n    \n    output$downloadData19 = downloadHandler(\n      filename = function() { \n        paste('graph5','.png', sep='') \n      },\n      content = function(file) {\n        png(file)\n        Plot6()\n        dev.off()\n      },\n      contentType='image/png')\n    \n    output$download19=renderUI({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",\"\")\n      )\n      if(values()$NBFREQ==0){\n        return()\n      }\n      else{\n        return(downloadButton(\"downloadData19\",gettext(\"Download as png\")))\n      }\n    })\n    \n    output$downloadData20 = downloadHandler(\n      filename = function() { \n        paste('graph5','.jpg', sep='') \n      },\n      content = function(file) {\n        jpeg(file)\n        Plot6()\n        dev.off()\n      },\n      contentType='image/jpg')\n    \n    output$download20=renderUI({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",\"\")\n      )\n      if(values()$NBFREQ==0){\n        return()\n      }\n      else{\n        return(downloadButton(\"downloadData20\",gettext(\"Download as jpg\")))\n      }\n    })\n    \n    output$downloadData21 = downloadHandler(\n      filename = function() { \n        paste('graph5','.pdf', sep='') \n      },\n      content = function(file) {\n        pdf(file)\n        Plot6()\n        dev.off()\n      },\n      contentType=NA)\n    \n    output$download21=renderUI({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",\"\")\n      )\n      if(values()$NBFREQ==0){\n        return()\n      }\n      else{\n        return(downloadButton(\"downloadData21\",gettext(\"Download as pdf\")))\n      }\n    })\n    \n    output$downloadData22 = downloadHandler(\n      filename = function() { \n        paste('graph5','.emf', sep='') \n      },\n      content = function(file) {\n        emf(file)\n        Plot6()\n        dev.off()\n      },\n      contentType=NA)\n    \n    output$downloadData1 = downloadHandler(\n      filename = function() { \n        paste('graph1','.jpg', sep='') \n      },\n      content = function(file) {\n        jpeg(file)\n        Plot1()\n        dev.off()\n      },\n      contentType='image/jpg')\n    \n    output$downloadData2 = downloadHandler(\n      filename = function() { \n        paste('graph1','.pdf', sep='') \n      },\n      content = function(file) {\n        pdf(file)\n        Plot1()\n        dev.off()\n      },\n      contentType=NA)\n    \n    output$downloadData4 = downloadHandler(\n      filename = function() { \n        paste('graph2','.jpg', sep='') \n      },\n      content = function(file) {\n        jpeg(file)\n        Plot2()\n        dev.off()\n      },\n      contentType='image/jpg')\n    \n    output$download4=renderUI({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",\"\")\n      )\n      if(values()$NBQUANTI==0){\n        return()\n      }\n      else{\n        return(downloadButton(\"downloadData4\",gettext(\"Download as jpg\")))\n      }\n    })\n    \n    output$downloadData5 = downloadHandler(\n      filename = function() { \n        paste('graph2','.pdf', sep='') \n      },\n      content = function(file) {\n        pdf(file)\n        Plot2()\n        dev.off()\n      },\n      contentType=NA)\n    \n    output$download5=renderUI({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",\"\")\n      )\n      if(values()$NBQUANTI==0){\n        return()\n      }\n      else{\n        return(downloadButton(\"downloadData5\",gettext(\"Download as pdf\")))\n      }\n    })\n    \n    output$downloadData6 = downloadHandler(\n      filename = function() { \n        paste('graph2','.emf', sep='') \n      },\n      content = function(file) {\n        emf(file)\n        Plot2()\n        dev.off()\n      },\n      contentType=NA)\n    \n    output$downloadData7 = downloadHandler(\n      filename = function() { \n        paste('graph1','.emf', sep='') \n      },\n      content = function(file) {\n        emf(file)\n        Plot1()\n        dev.off()\n      },\n      contentType=NA)\n    \n    ### Sorties\n    \n    output$sorties1=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$ind$coord))\n    })\n    \n    output$sorties2=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$ind$contrib))\n    })\n    \n    output$sorties3=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$ind$cos2))\n    })\n    \n    output$sorties4=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$ind$within.inertia))\n    })\n    \n    output$sorties5=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$ind$coord.partiel))\n    })\n    \n    output$sorties6=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$ind$within.partial.inertia))\n    })\n    \n    output$sorties11=renderTable({\n      return(as.data.frame(values()$res.ctb1))\n    },digits=-2)\n    \n    output$sorties22=renderTable({\n      \n      return(as.data.frame(values()$res.ctb2))\n    })\n    \n    output$sorties44=renderTable({\n      return(as.data.frame(values()$res.ctb3))\n    })\n    \n    output$sorties12=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$partial.axes$coord))\n    })\n    \n    output$sorties23=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$partial.axes$cor))\n    })\n    \n    output$sorties34=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$partial.axes$contrib))\n    })\n    \n    output$sorties45=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      return(as.data.frame(values()$res.MFA$partial.axes$cor.between))\n    })\n    \n    \n    \n    output$sortiegroup=renderTable({\n      etat2=error()\n      validate(\n        need(etat2!=\"not\",gettext(\"Please select at least 2 groups\"))\n      )\n      write.infile(X=values()$res.MFA$group,file=paste(getwd(),\"fichgroup.csv\"),sep=\";\",nb.dec=5)\n      baba=read.csv(paste(getwd(),\"fichgroup.csv\"),sep=\";\",header=FALSE)\n      colnames(baba)=NULL\n      file.remove(paste(getwd(),\"fichgroup.csv\"))\n      baba\n    },\n    include.rownames=FALSE)\n    \n    \n    \n  }\n)\n\n\n",
    "created" : 1480638087889.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "933315886",
    "id" : "3ECF1C9F",
    "lastKnownWriteTime" : 1480544988,
    "last_content_update" : 1480544988,
    "path" : "~/Desktop/study/243 final project/MFA Shiny/server.R",
    "project_path" : "server.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}